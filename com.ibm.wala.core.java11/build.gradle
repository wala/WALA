plugins {
	id 'eclipse'
}

eclipse.project.natures 'org.eclipse.pde.PluginNature'

// Clear compatibility settings already applied in a `subprojects { ... }` block in the top-level
// `build.gradle`. Once those are gone, we can then use `java.toolchain` to request a Java 11 JDK
// just for this subproject.
java.sourceCompatibility = null
java.targetCompatibility = null
java.toolchain.languageVersion.set JavaLanguageVersion.of(11)

sourceSets {
	testSubjects
}

dependencies {
	implementation project(':com.ibm.wala.core')
	testImplementation(
			'junit:junit:4.13.2',
			testFixtures(project(':com.ibm.wala.core')),
	)
	testRuntimeOnly sourceSets.testSubjects.output.classesDirs
}


////////////////////////////////////////////////////////////////////////
//
//  collect "com.ibm.wala.core.java11.testdata_1.0.0.jar"
//

final collectTestData = tasks.register('collectTestData', Jar) {
	archiveFileName.set 'com.ibm.wala.core.java11.testdata_1.0.0.jar'
	from compileTestSubjectsJava
	includeEmptyDirs false
	destinationDirectory = layout.buildDirectory.dir name
}


////////////////////////////////////////////////////////////////////////


tasks.named('processTestResources') {
	from collectTestData
}

tasks.named('test') {
	maxHeapSize = '1500M'
	systemProperty 'com.ibm.wala.junit.analyzingJar', 'true'
	systemProperty 'com.ibm.wala.junit.profile', 'short'
	// classpath += files project(':com.ibm.wala.core.java11').sourceSets.test.java.outputDir
	testLogging {
		exceptionFormat = 'full'
		events 'passed', 'skipped', 'failed'
	}

	outputs.file layout.buildDirectory.file('report')
}

apply from: rootProject.file("gradle-mvn-push.gradle")