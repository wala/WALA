dependencies {
	api(project(':com.ibm.wala.cast')) {
		because 'public class JSCallGraphUtil extends class CAstCallGraphUtil'
	}
	implementation(
			'commons-io:commons-io:2.6',
			'junit:junit:4.13',
			'net.htmlparser.jericho:jericho-html:3.2',
			project(':com.ibm.wala.core'),
			project(':com.ibm.wala.shrike'),
			project(':com.ibm.wala.util'),
	)
	testFixturesImplementation(
			'junit:junit:4.13',
			testFixtures(project(':com.ibm.wala.cast')),
			testFixtures(project(':com.ibm.wala.core')),
	)
	testImplementation(
			'junit:junit:4.13',
			testFixtures(project(':com.ibm.wala.cast')),
			testFixtures(project(':com.ibm.wala.core')),
	)
}

tasks.register('createPackageList', CreatePackageList) {
	sourceSet sourceSets.main
}

tasks.named('javadoc') {
	def rhinoName = ':com.ibm.wala.cast.js.rhino'
	dependsOn "$rhinoName:compileJava"

	doFirst {
		classpath += files project(rhinoName).compileJava
	}
}

tasks.named('processTestResources') {
	def data = project(':com.ibm.wala.cast.js')
	from data.sourceSets.test.resources
}

tasks.named('test') {
	maxHeapSize = '800M'
}

final def downloadAjaxslt = tasks.register('downloadAjaxslt', VerifiedDownload) {
	def version = '0.8.1'
	def versionedArchive = "ajaxslt-${version}.tar.gz"
	src "https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/ajaxslt/$versionedArchive"
	dest "$temporaryDir/$versionedArchive"
	checksum 'c995abe3310a401bb4db7f28a6409756'
}

tasks.register('unpackAjaxslt', Sync) {
	dependsOn downloadAjaxslt
	from(tarTree(downloadAjaxslt.get().dest)) {
		eachFile {
			def newSegments = relativePath.segments[1 .. -1] as String[]
			relativePath new RelativePath(!directory, newSegments)
		}
	}
	into "${sourceSets.test.resources.srcDirs.find()}/ajaxslt"
}

tasks.named('clean') {
	dependsOn 'cleanUnpackAjaxslt'
}

tasks.named('processTestResources') {
	dependsOn 'unpackAjaxslt'
}

apply from: rootProject.file("gradle-mvn-push.gradle")
