////////////////////////////////////////////////////////////////////////
//
//  plugin configuration must precede everything else
//

buildscript {
	dependencies.classpath 'commons-io:commons-io:2.6'
}

plugins {
	id 'com.diffplug.gradle.eclipse.mavencentral' version '3.18.1' apply false
	id 'com.github.hauner.jarTest' version '1.0.1' apply false
	id 'com.github.sherter.google-java-format' version '0.8'
	id 'de.set.ecj' version '1.4.1' apply false
	id 'de.undercouch.download'
	id 'nebula.lint' version '14.2.5'
	id 'nebula.source-jar' version '14.1.1' apply false
}

repositories {
	// to get the google-java-format jar and dependencies
	mavenCentral()
}

ext.osName = System.getProperty('os.name')
ext.isWindows = osName.startsWith('Windows ')


////////////////////////////////////////////////////////////////////////
//
//  common Java setup shared by multiple projects
//

group name
version VERSION_NAME

// version of Eclipse JARs to use for Eclipse-integrated WALA components
ext.eclipseVersion = '4.7.2'
ext.eclipseWstJsdtVersion = '1.0.201.v2010012803'

subprojects { subproject ->
	// skip generic Java setup for the few projects that have no Java code whatsoever
	switch (subproject.name) {
		case 'cast':
		case 'smoke_main':
		case 'xlator_test':
		case 'com.ibm.wala-repository':
		case ~/.*_feature/:
			return
	}

	apply plugin: 'eclipse'
	apply plugin: 'java-library'
	apply plugin: 'nebula.source-jar'

	version rootProject.version

	repositories {
		mavenCentral()
	}

	eclipse {
		synchronizationTasks 'processTestResources'
	}

	tasks.named('test') {
		include '**/*Test.class'
		include '**/*TestCase.class'
		include '**/*Tests.class'
		include '**/Test*.class'
		exclude '**/*AndroidLibs*.class'

		if (project.hasProperty('excludeSlowTests')) {
			dependencies {
				testRuntime testFixtures(project(':com.ibm.wala.testutil'))
			}
			useJUnit {
				excludeCategories 'com.ibm.wala.tests.util.SlowTests'
			}
		}

		if (project.hasProperty('trial')) {
			outputs.upToDateWhen { false }
			afterTest { descriptor, result ->
				def csv = new File("$rootProject.buildDir/time-trials.csv")
				if (!csv.exists()) {
					csv.append('trial,className,name,resultType,startTime,endTime\n')
				}
				csv.append("$trial,$descriptor.className,$descriptor.name,$result.resultType,$result.startTime,$result.endTime\n")
			}
		} else {
			maxParallelForks = Integer.MAX_VALUE
		}
	}

	// Stash the original Java compiler toolchain in case needed.  This is actually only used by
	// :com.ibm.wala.cast.test:compileTestJava, which requires JNI support that ECJ does not offer.
	tasks.withType(JavaCompile) {
		it.ext.originalToolChain = it.toolChain
		options.encoding = 'UTF-8'
	}

	// Use ECJ instead of default Java compiler if "javaCompiler" project property is set to either
	// "ecj" or "eclipse" (case-insensitive).  For example, use "-PjavaCompiler=ecj" on Gradle
	// command line or add "javaCompiler=ecj" to the "gradle.properties" file.
	final def javaCompilerProperty = subproject.findProperty('javaCompiler')?.toLowerCase()
	switch (javaCompilerProperty) {
		case 'ecj':
		case 'eclipse':
			apply plugin: 'de.set.ecj'
			tasks.withType(JavaCompile) {
				options.compilerArgs << '-properties' << "$projectDir/.settings/org.eclipse.jdt.core.prefs"
			}
			break
		case 'default':
		case '':
		case null:
			break
		default:
			throw new InvalidUserDataException("unrecognized Java compiler \"$javaCompilerProperty\"")
	}
}


///////////////////////////////////////////////////////////////////////
//
//  Javadoc documentation
//

allprojects {
	tasks.withType(Javadoc).configureEach {
		options.addBooleanOption('Xdoclint:all,-missing', true)
		options.encoding = 'UTF-8'
		options.quiet()
	}
}

tasks.register('aggregatedJavadocs', Javadoc) {
	description = 'Generate javadocs from all child projects as if it was a single project'
	group = 'Documentation'
	destinationDir = file("$buildDir/docs/javadoc")
	title = "$project.name $version API"
	options.author true

	subprojects.each { proj ->
		proj.tasks.withType(Javadoc).each { javadocTask ->
			source += javadocTask.source
			classpath += javadocTask.classpath
			excludes += javadocTask.excludes
			includes += javadocTask.includes
		}
	}
}


////////////////////////////////////////////////////////////////////////
//
//  linters for various specific languages or file formats
//

// Gradle build scripts
allprojects {
	apply plugin: 'nebula.lint'
	gradleLint.alwaysRun = false
	gradleLint {
		rules = ['all-dependency']
		excludedRules = [
				// <https://github.com/nebula-plugins/gradle-lint-plugin/issues/203>
				'undeclared-dependency',
				'unused-dependency',
		]
	}
}

// shell scripts, provided they have ".sh" extension
if (isWindows) {
	// create a no-op "shellCheck" task so that "gradlew shellCheck" vacuously passes on Windows
	tasks.register('shellCheck')
} else {
	// create a real "shellCheck" task that actually runs the "shellcheck" linter, if available
	tasks.register('shellCheck', Exec) {
		description 'Check all shell scripts using shellcheck, if available'
		group 'lint'

		inputs.files fileTree('.').exclude('**/build').include('**/*.sh')
		outputs.file "$temporaryDir/log"

		doFirst {
			// quietly succeed if "shellcheck" is not available
			executable 'shellcheck'
			final def execPaths = System.getenv('PATH').split(File.pathSeparator)
			final def isAvailable = execPaths.any { file("$it/$executable").exists() }
			if (!isAvailable) executable 'true'

			args inputs.files

			final def consoleOutput = System.out
			final def fileOutput = new FileOutputStream(outputs.files.singleFile)
			final def bothOutput = new org.apache.tools.ant.util.TeeOutputStream(consoleOutput, fileOutput)
			standardOutput = errorOutput = bothOutput
		}
	}
}

// Java formatting
googleJavaFormat {
	toolVersion = '1.7'
	// exclude since various tests make assertions based on
	// source positions in the test inputs.  to auto-format
	// we also need to update the test assertions
	exclude 'com.ibm.wala.cast.java.test.data/**/*.java'
}

// install Java reformatter as git pre-commit hook
tasks.register('installGitHooks', Copy) {
	from 'config/hooks/pre-commit-stub'
	rename { 'pre-commit' }
	into '.git/hooks'
	fileMode 0777
}

// run all known linters
tasks.register('linters') {
	group = 'lint'
	dependsOn(
			'lintGradle',
			'shellCheck',
	)
	if (!(isWindows && System.getenv('GITHUB_ACTIONS') == 'true')) {
		// Known to be broken on Windows when running as a GitHub Action, but not intentionally so.
		// Please fix if you know how!  <https://github.com/wala/WALA/issues/608>
		dependsOn 'verifyGoogleJavaFormat'
	}
}


////////////////////////////////////////////////////////////////////////
//
//  Eclipse IDE integration
//

// workaround for <https://github.com/gradle/gradle/issues/4802>
allprojects {
	apply plugin: 'eclipse'

	eclipse.classpath.file.whenMerged {
		entries.each {
			if (it in org.gradle.plugins.ide.eclipse.model.AbstractClasspathEntry && it.entryAttributes['gradle_used_by_scope'] == 'test')
				it.entryAttributes['test'] = true
		}
	}
}


////////////////////////////////////////////////////////////////////////
//
//  helpers for building native CAst components
//

@SuppressWarnings("unused")
final def addCastLibrary(project, recipient) {
	recipient.binaries.whenElementFinalized { binary ->
		binary.linkTask.get().configure { linkTask ->
			project.project(':com.ibm.wala.cast:cast').tasks.named(linkTask.name) { castTask ->
				addRpath(linkTask, getNativeLibraryOutput(castTask))
			}
		}
	}

	addJvmLibrary(project, recipient)
}

final File findJvmLibrary(extension, currentJavaHome, subdirs) {
	return subdirs
			.collect { file "$currentJavaHome/$it/libjvm.$extension" }
			.find { it.exists() }
}

final def addJvmLibrary(project, recipient) {
	project.with {
		recipient.with {
			binaries.whenElementFinalized { binary ->
				def libJVM

				project.dependencies {
					final def currentJavaHome = org.gradle.internal.jvm.Jvm.current().javaHome
					def osIncludeSubdir
					final def family = targetMachine.operatingSystemFamily
					switch (family) {
						case 'linux':
							osIncludeSubdir = 'linux'
							libJVM = findJvmLibrary('so', currentJavaHome, [
									'jre/lib/amd64/server',
									'lib/amd64/server',
									'lib/server',
							])
							break
						case 'macos':
							osIncludeSubdir = 'darwin'
							libJVM = findJvmLibrary('dylib', currentJavaHome, [
									'jre/lib/server',
									'lib/server',
							])
							break
						case 'windows':
							osIncludeSubdir = 'win32'
							//noinspection GrReassignedInClosureLocalVar
							libJVM = file("$currentJavaHome/lib/jvm.lib")
							break
						default:
							throw new TaskInstantiationException("unrecognized operating system family \"$family\"")
					}

					final def jniIncludeDir = "$currentJavaHome/include"
					add(binary.includePathConfiguration.name, files(jniIncludeDir, "$jniIncludeDir/$osIncludeSubdir"))
					add(binary.linkLibraries.name, files(libJVM))
				}

				binary.linkTask.get().configure { task ->
					addRpath(task, libJVM)
				}
			}
		}
	}
}

final def addRpath(linkTask, library) {
	if (!isWindows) {
		linkTask.linkerArgs.add "-Wl,-rpath,$library.parent"
	}
}

final def getNativeLibraryOutput(task) {
	final def outputsFiles = task.outputs.files
	final def parent = outputsFiles[0]
	final def library = outputsFiles[1]
	// on Windows, outputsFiles[2] is DLL
	assert parent as String == library.parent
	return library
}


////////////////////////////////////////////////////////////////////////
//
//  Extra downloads pre-fetcher
//

tasks.register('downloads') {
	dependsOn allprojects*.tasks*.withType(VerifiedDownload)
}
