////////////////////////////////////////////////////////////////////////
//
//  plugin configuration must precede everything else
//

buildscript {
	dependencies.classpath 'commons-io:commons-io:2.4'
}

plugins {
	id 'com.diffplug.gradle.p2.asmaven' version '3.17.3'
	id 'com.github.hauner.jarTest' version '1.0.1' apply false
	id 'com.github.sherter.google-java-format' version '0.8'
	id 'de.set.ecj' version '1.4.1' apply false
	id 'de.undercouch.download'
	id 'nebula.lint' version '11.5.0'
	id 'nebula.source-jar' version '9.5.0' apply false
}

repositories {
	// to get the google-java-format jar and dependencies
	mavenCentral()
}


////////////////////////////////////////////////////////////////////////
//
//  required Eclipse components
//

p2AsMaven {
	group 'eclipse-deps', {
		repoEclipse '4.7.2'
		slicingOption 'latestVersionOnly', 'true'
		iu 'org.eclipse.core.commands'
		iu 'org.eclipse.core.contenttype'
		iu 'org.eclipse.core.jobs'
		iu 'org.eclipse.core.resources'
		iu 'org.eclipse.core.runtime'
		iu 'org.eclipse.equinox.app'
		iu 'org.eclipse.equinox.common'
		iu 'org.eclipse.equinox.preferences'
		iu 'org.eclipse.jdt.core'
		iu 'org.eclipse.jface'
		iu 'org.eclipse.osgi'
		iu 'org.eclipse.pde.core'
		iu 'org.eclipse.swt'
		iu 'org.eclipse.ui.ide'
		iu 'org.eclipse.ui.workbench'
	}
	group 'wst-deps', {
		repo 'http://download.eclipse.org/releases/oxygen'
		slicingOption 'latestVersionOnly', 'true'
		iu 'org.eclipse.wst.jsdt.core'
		iu 'org.eclipse.wst.jsdt.ui'
	}
}


////////////////////////////////////////////////////////////////////////
//
//  common Java setup shared by multiple projects
//

group name
version VERSION_NAME

subprojects { subproject ->
	// skip generic Java setup for the few projects that have no Java code whatsoever
	switch (subproject.name) {
		case 'cast':
		case 'smoke_main':
		case 'xlator_test':
		case 'com.ibm.wala-repository':
		case ~/.*_feature/:
			return
	}

	apply plugin: 'java-library'
	apply plugin: 'nebula.source-jar'

	version rootProject.version

	repositories {
		mavenCentral()
		maven {
			url "$rootProject.buildDir/p2asmaven/maven"
		}
	}

	jar.manifest.from('META-INF/MANIFEST.MF')

	tasks.register('afterEclipseBuildshipImport') {
		dependsOn 'processTestResources'
	}

	tasks.named('test') {
		include '**/*Test.class'
		include '**/*TestCase.class'
		include '**/*Tests.class'
		include '**/Test*.class'
		exclude '**/*AndroidLibs*.class'

		maxParallelForks = Integer.MAX_VALUE
	}

	// Stash the original Java compiler toolchain in case needed.  This is actually only used by
	// :com.ibm.wala.cast.test:compileTestJava, which requires JNI support that ECJ does not offer.
	tasks.withType(JavaCompile) {
		it.ext.originalToolChain = it.toolChain
	}

	// Use ECJ instead of default Java compiler if "javaCompiler" project property is set to either
	// "ecj" or "eclipse" (case-insensitive).  For example, use "-PjavaCompiler=ecj" on Gradle
	// command line or add "javaCompiler=ecj" to the "gradle.properties" file.
	final def javaCompilerProperty = subproject.findProperty('javaCompiler')?.toLowerCase()
	switch (javaCompilerProperty) {
		case 'ecj':
		case 'eclipse':
			apply plugin: 'de.set.ecj'
			tasks.withType(JavaCompile) {
				options.compilerArgs << '-properties' << "$projectDir/.settings/org.eclipse.jdt.core.prefs"
			}
			break
		case 'default':
		case '':
		case null:
			break
		default:
			throw new InvalidUserDataException("unrecognized Java compiler \"$javaCompilerProperty\"")
	}
}


////////////////////////////////////////////////////////////////////////
//
//  find platform-specific SWT implementations
//

def osgi_platform

switch (System.getProperty('os.name')) {
	case ~/Mac OS X/:
		osgi_platform = 'cocoa.macosx.x86_64'
		break
	case ~/Windows.*/:
		osgi_platform = 'win32.win32.x86_64'
		break
	case ~/Linux/:
		osgi_platform = 'gtk.linux.x86_64'
		break
	default:
		throw new GradleException("unrecognized operating system name \"${System.getProperty('os.name')}\"")
}

System.setProperty('osgi.platform', osgi_platform)

subprojects {
	configurations.all {
		resolutionStrategy {
			// failOnVersionConflict()
			dependencySubstitution {
				substitute module('eclipse-deps:org.eclipse.swt.${osgi.platform}') with module("eclipse-deps:org.eclipse.swt.${System.getProperty('osgi.platform')}:3.+")
			}
		}
	}
}


///////////////////////////////////////////////////////////////////////
//
//  Javadoc documentation
//

allprojects {
	tasks.withType(Javadoc).configureEach {
		options.addBooleanOption('Xdoclint:all,-missing', true)
		options.quiet()
	}
}

tasks.register('aggregatedJavadocs', Javadoc) {
	description = 'Generate javadocs from all child projects as if it was a single project'
	group = 'Documentation'
	destinationDir = file("$buildDir/docs/javadoc")
	title = "$project.name $version API"
	options.author true

	subprojects.each { proj ->
		proj.tasks.withType(Javadoc).each { javadocTask ->
			source += javadocTask.source
			classpath += javadocTask.classpath
			excludes += javadocTask.excludes
			includes += javadocTask.includes
		}
	}
}


////////////////////////////////////////////////////////////////////////
//
//  linters for various specific languages or file formats
//

// Gradle build scripts
allprojects {
	apply plugin: 'nebula.lint'
	gradleLint.alwaysRun = false
	gradleLint {
		rules = ['all-dependency']
		excludedRules = [
				// <https://github.com/nebula-plugins/gradle-lint-plugin/issues/203>
				'undeclared-dependency',
				'unused-dependency',
		]
	}
}

// shell scripts, provided they have ".sh" extension
tasks.register('shellCheck', Exec) {
	description 'Check all shell scripts using shellcheck, if available'
	group 'lint'

	inputs.files fileTree('.').exclude('**/build').include('**/*.sh')
	outputs.file "$temporaryDir/log"

	doFirst {
		// quietly succeed if "shellcheck" is not available
		executable 'shellcheck'
		final def execPaths = System.getenv('PATH').split(File.pathSeparator)
		final def isAvailable = execPaths.any { file("$it/$executable").exists() }
		if (!isAvailable) executable 'true'

		args inputs.files

		final def consoleOutput = System.out
		final def fileOutput = new FileOutputStream(outputs.files.singleFile)
		final def bothOutput = new org.apache.tools.ant.util.TeeOutputStream(consoleOutput, fileOutput)
		standardOutput = errorOutput = bothOutput
	}
}

// Java formatting
googleJavaFormat {
	toolVersion = '1.7'
	// exclude since various tests make assertions based on
	// source positions in the test inputs.  to auto-format
	// we also need to update the test assertions
	exclude 'com.ibm.wala.cast.java.test.data/**/*.java'
}

// install Java reformatter as git pre-commit hook
tasks.register('installGitHooks', Copy) {
	from 'config/hooks/pre-commit-stub'
	rename { 'pre-commit' }
	into '.git/hooks'
	fileMode 0777
}

// run all known linters
tasks.register('linters') {
	group = 'lint'
	dependsOn(
			'lintGradle',
			'shellCheck',
			'verifyGoogleJavaFormat',
	)
}


////////////////////////////////////////////////////////////////////////
//
//  Eclipse IDE integration
//

tasks.register('afterEclipseBuildshipImport', Exec) {
	commandLine './revert-launchers.sh'
}

// workaround for <https://github.com/gradle/gradle/issues/4802>
allprojects {
	apply plugin: 'eclipse'

	eclipse.classpath.file.whenMerged {
		entries.each {
			if (it in org.gradle.plugins.ide.eclipse.model.AbstractClasspathEntry && it.entryAttributes['gradle_used_by_scope'] == 'test')
				it.entryAttributes['test'] = true
		}
	}
}


////////////////////////////////////////////////////////////////////////
//
//  helpers for building native CAst components
//

@SuppressWarnings("unused")
final def addCastLibrary(project, recipient) {
	recipient.binaries.whenElementFinalized { binary ->
		binary.linkTask.get().configure { linkTask ->
			project.project(':com.ibm.wala.cast:cast').tasks.named(linkTask.name) { castTask ->
				addRpath(linkTask, getNativeLibraryOutput(castTask))
			}
		}
	}

	addJvmLibrary(project, recipient)
}

final findJvmLibrary(extension, currentJavaHome, subdirs) {
	for (final subdir : subdirs) {
		final candidate = file "$currentJavaHome/$subdir/libjvm.$extension"
		if (candidate.exists())
			return candidate
	}
}

final def addJvmLibrary(project, recipient) {
	project.with {
		recipient.with {
			binaries.whenElementFinalized { binary ->
				def libJVM

				project.dependencies {
					final def currentJavaHome = org.gradle.internal.jvm.Jvm.current().javaHome
					def osIncludeSubdir
					final def family = targetMachine.operatingSystemFamily
					switch (family) {
						case 'linux':
							osIncludeSubdir = 'linux'
							libJVM = findJvmLibrary('so', currentJavaHome, [
									'jre/lib/amd64/server',
									'lib/amd64/server',
									'lib/server',
							])
							break
						case 'macos':
							osIncludeSubdir = 'darwin'
							libJVM = findJvmLibrary('dylib', currentJavaHome, [
									'jre/lib/server',
									'lib/server',
							])
							break
						case 'windows':
							osIncludeSubdir = 'win32'
							libJVM = file("$currentJavaHome/lib/jvm.lib")
							break
						default:
							throw new TaskInstantiationException("unrecognized operating system family \"$family\"")
					}

					final def jniIncludeDir = "$currentJavaHome/include"
					add(binary.includePathConfiguration.name, files(jniIncludeDir, "$jniIncludeDir/$osIncludeSubdir"))
					add(binary.linkLibraries.name, files(libJVM))
				}

				binary.linkTask.get().configure { task ->
					addRpath(task, libJVM)
				}
			}
		}
	}
}

final def addRpath(linkTask, library) {
	linkTask.linkerArgs.add "-Wl,-rpath,$library.parent"
}

final def getNativeLibraryOutput(task) {
	final def outputsFiles = task.outputs.files
	assert outputsFiles.size() == 2
	final def (parent, library) = outputsFiles
	assert parent as String == library.parent
	return library
}


////////////////////////////////////////////////////////////////////////
//
//  Extra downloads pre-fetcher
//

tasks.register('downloads') {
	dependsOn allprojects*.tasks*.withType(VerifiedDownload)
}
