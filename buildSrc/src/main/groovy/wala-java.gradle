// Build configuration for subprojects that include Java source code.


plugins {
	id 'eclipse'
	id 'java-library'
	id 'java-test-fixtures'
	id 'maven-publish'
	id 'net.ltgt.errorprone'
	id 'signing'
	id 'wala-javadoc'
	id 'wala-subproject'
}


java.sourceCompatibility = JavaVersion.VERSION_1_8
java.targetCompatibility = JavaVersion.VERSION_1_8

repositories {
	mavenCentral()
	// to get r8
	maven {
		url 'https://storage.googleapis.com/r8-releases/raw'
	}
}

// only use Error Prone on JDK 9+ JVMs
final useErrorProne = JavaVersion.current().isJava9Compatible()

dependencies {
	if (useErrorProne) {
		errorprone 'com.google.errorprone:error_prone_core:2.15.0'
	} else {
		// We disable Error Prone for pre JDK 9+, but we still need to set these dependencies, as
		// otherwise the build fails with a javac crash
		errorprone 'com.google.errorprone:error_prone_core:2.10.0'
		errorproneJavac 'com.google.errorprone:javac:9+181-r4173-1'
	}
}

tasks.withType(JavaCompile).configureEach {
	if (useErrorProne) {
		options.errorprone {
			// don't run warning-level checks by default as they add too much noise to build output
			// NOTE: until https://github.com/google/error-prone/pull/3462 makes it to a release,
			// we need to customize the level of at least one specific check to make this flag work
			disableAllWarnings = true
			// warning-level checks upgraded to error, since we've fixed all the warnings
			error 'UnnecessaryParentheses'
			error 'UnusedVariable'
			// checks we do not intend to try to fix in the near-term:
			// Just too many of these; proper Javadoc would be a great long-term goal
			disable 'MissingSummary'
			// Example for running Error Prone's auto-patcher.  To run, uncomment and change the
			// check name to the one you want to patch
//			errorproneArgs.addAll(
//					"-XepPatchChecks:UnnecessaryParentheses",
//					"-XepPatchLocation:IN_PLACE"
//			)
		}
	} else {
		options.errorprone.enabled = false
	}
}

configurations {
	all {
		resolutionStrategy.dependencySubstitution {
			substitute module('org.hamcrest:hamcrest-core') using module('org.hamcrest:hamcrest:2.2') because 'junit depends on hamcrest-core, but all hamcrest-core classes have been incorporated into hamcrest'
		}
	}

	implementation {
		// See https://github.com/wala/WALA/issues/823.  This group was renamed to
		// net.java.dev.jna.  The com.sun.jna dependency is only pulled in from
		// com.ibm.wala.ide.* projects.  Since we only try to compile those projects from
		// Gradle, but not run them, excluding the group as a dependence is a reasonable
		// solution.
		exclude group: 'com.sun.jna'
	}

	aggregatedJavadocClasspath
}

tasks.withType(Javadoc).configureEach {
	classpath.each { path ->
		artifacts {
			aggregatedJavadocClasspath path
		}
	}
}

eclipse {
	synchronizationTasks 'processTestResources'
}

tasks.named('test') {
	include '**/*Test.class'
	include '**/*TestCase.class'
	include '**/*Tests.class'
	include '**/Test*.class'
	exclude '**/*AndroidLibs*.class'

	if (project.hasProperty('excludeSlowTests')) {
		useJUnit {
			excludeCategories 'com.ibm.wala.tests.util.SlowTests'
		}
	}

	if (project.hasProperty('trial')) {
		outputs.upToDateWhen { false }
		afterTest { descriptor, result ->
			def csv = new File("$rootProject.buildDir/time-trials.csv")
			if (!csv.exists()) {
				csv.append('trial,className,name,resultType,startTime,endTime\n')
			}
			csv.append("$trial,$descriptor.className,$descriptor.name,$result.resultType,$result.startTime,$result.endTime\n")
		}
	} else {
		maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
	}
}

final ecjCompileTaskProviders = sourceSets.collect { sourceSet ->
	JavaCompileUsingEcj.withSourceSet(project, sourceSet)
}

project.tasks.named('check').configure {
	dependsOn ecjCompileTaskProviders
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}

// Special hack for WALA as an included build.  Composite
// builds only build and use artifacts from the default
// configuration of included builds:
// <https://docs.gradle.org/current/userguide/composite_builds.html#included_build_substitution_limitations>.
// This known limitation makes WALA test fixtures unavailable
// when WALA is included in a composite build.  As a
// workaround for composite projects that rely on those test
// fixtures, we extend the main sourceSet to include all
// test-fixture sources too.  This hack is only applied when
// WALA itself is an included build.
if (project.gradle.parent != null) {
	afterEvaluate {
		sourceSets {
			main.java.srcDirs testFixtures.java.srcDirs
		}

		dependencies {
			implementation configurations.testFixturesImplementation.dependencies
		}
	}
}
