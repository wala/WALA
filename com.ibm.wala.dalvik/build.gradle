plugins {
	id 'gradle-mvn-push'
	id 'wala-java'
}

final downloadDroidBench = tasks.register('downloadDroidBench', VerifiedDownload) {
	src 'https://codeload.github.com/secure-software-engineering/DroidBench/zip/DroidBench_2.0'
	dest project.layout.buildDirectory.file('DroidBench_2.0.zip')
	checksum '16726a48329835140e14f18470a1b4a3'
}

final unpackDroidBench = tasks.register('unpackDroidBench', Sync) {
	from(downloadDroidBench.map { zipTree it.dest }) {
		eachFile {
			relativePath new RelativePath(!directory, relativePath.segments[1..-1] as String[])
		}
	}

	into layout.buildDirectory.dir('DroidBench')
	includeEmptyDirs false
}

final downloadAndroidSdk = tasks.register('downloadAndroidSdk', VerifiedDownload) {
	def sdkOs
	switch (osName) {
		case ~/Linux/:
			sdkOs = 'linux'
			checksum '124f2d5115eee365df6cf3228ffbca6fc3911d16f8025bebd5b1c6e2fcfa7faf'
			break
		case ~/Mac OS X/:
			sdkOs = 'mac'
			checksum '6929a1957f3e71008adfade0cebd08ebea9b9f506aa77f1849c7bdc3418df7cf'
			break
		case ~/Windows.*/:
			sdkOs = 'win'
			checksum 'f9e6f91743bcb1cc6905648ca751bc33975b0dd11b50d691c2085d025514278c'
			break
		default:
			throw new GradleException("unrecognized operating system name \"$osName\"")
	}
	def archive = "commandlinetools-$sdkOs-7583922_latest.zip"
	src "https://dl.google.com/android/repository/$archive"
	dest project.layout.buildDirectory.file(archive)
	algorithm 'SHA-256'
}

final installAndroidSdk = tasks.register('installAndroidSdk', Sync) {
	from downloadAndroidSdk.map { zipTree it.dest }
	into layout.buildDirectory.dir(name)

	ext {
		platformsVersion = 'android-28'
	}

	doLast {
		exec {
			def shell, shellFlags, yes, semicolon, discard
			if (isWindows) {
				shell = 'PowerShell'
				shellFlags = '-Command'
				yes = 'echo y'
				semicolon = '`;'
				discard = '$null'
			} else {
				shell = 'sh'
				shellFlags = '-ceu'
				yes = 'yes 2>/dev/null'
				semicolon = /\;/
				discard = '/dev/null'
			}
			
			commandLine shell, shellFlags, "$yes | $destinationDir/cmdline-tools/bin/sdkmanager --sdk_root=$destinationDir platforms$semicolon$platformsVersion >$discard"
		}
	}
	outputs.cacheIf { true }
}

eclipse {
	synchronizationTasks 'installAndroidSdk'
}

tasks.register('extractSampleCup') {
	inputs.file configurations.sampleCup.singleFile
	outputs.file layout.buildDirectory.file("$name/sample.cup")

	doLast {
		copy {
			from zipTree(inputs.files.singleFile)
			include 'parser.cup'
			rename { outputs.files.singleFile.name }
			into outputs.files.singleFile.parent
		}
	}
}

tasks.register('downloadSampleLex', VerifiedDownload) {
	src 'https://www.cs.princeton.edu/~appel/modern/java/JLex/current/sample.lex'
	dest layout.buildDirectory.file("$name/sample.lex")
	checksum 'ae887758b2657981d023a72a165da830'
}

configurations {
	sampleCup
}

dependencies {
	implementation(
			'org.slf4j:slf4j-api:1.7.32',
			'org.smali:dexlib2:2.5.2',
			'com.google.guava:guava:31.1-jre',
			project(':com.ibm.wala.core'),
			project(':com.ibm.wala.shrike'),
			project(':com.ibm.wala.util'),
	)
	sampleCup 'java_cup:java_cup:0.9e:sources'
	testImplementation(
			'com.android.tools:r8:2.2.42',
			'junit:junit:4.13.2',
			'org.smali:dexlib2:2.5.2',
			project(':com.ibm.wala.core'),
			project(':com.ibm.wala.dalvik'),
			project(':com.ibm.wala.shrike'),
			project(':com.ibm.wala.util'),
			testFixtures(project(':com.ibm.wala.core')),
	)
	testRuntimeOnly(
			// directory containing "android.jar", which various tests want to find as a resource
			files(installAndroidSdk.map { "$it.outputs.files.singleFile/platforms/$it.platformsVersion" }),
	)
}

tasks.named('processTestResources') {
	from downloadSampleLex
	from extractSampleCup
	from [
			'collectTestDataA',
			'collectJLex',
			'compileTestJava',
			'downloadJavaCup',
			'extractBcel',
	].collect(project(':com.ibm.wala.core').tasks.&named)
}

if (isWindows)
	tasks.named('test') {
		exclude '**/droidbench/**'
	}
else
	sourceSets.test.resources.srcDir unpackDroidBench

tasks.named('test') {
	maxHeapSize = '800M'

	outputs.files([
			'parser.java',
			'report',
			'sym.java',
	].collect(layout.buildDirectory.&file))
}

googleJavaFormat {
	// generated files
	exclude "$name/parser.java"
	exclude "$name/sym.java"
}
