plugins {
	id 'cpp-application'
}

evaluationDependsOn(':com.ibm.wala.cast.test:xlator_test')

application {
	dependencies {
		implementation project(':com.ibm.wala.cast:cast')
		implementation project(':com.ibm.wala.cast.test:xlator_test')
	}

	addCastLibrary(project, it)

	binaries.whenElementFinalized { binary ->
		binary.linkTask.get().configure { linkTask ->
			final def libxlator_test = getNativeLibraryOutput(project(':com.ibm.wala.cast.test:xlator_test').tasks.getByName(linkTask.name))
			addRpath(linkTask, libxlator_test)

			if (binary.debuggable && !binary.optimized) {
				tasks.register('checkSmoke_main', Exec) {
					dependsOn linkTask

					// main executable to run for test
					def executableBinary = binary.executableFile.get()
					executable executableBinary

					// xlator Java bytecode + implementation of native methods
					def pathElements = ['../build/classes/java/test', libxlator_test.parent]

					// "primordial.txt" resource loaded during test
					def coreResources = project(':com.ibm.wala.core').processResources
					dependsOn coreResources
					pathElements << coreResources.destinationDir

					// additional supporting Java class files
					['cast', 'core', 'util'].each {
						def compileJava = project(":com.ibm.wala.$it").compileJava
						dependsOn compileJava
						pathElements << compileJava.destinationDir
					}

					// all combined as a colon-delimited path list
					args pathElements.join(':')

					// log output to file, although we don't validate it
					final def outFile = file("$temporaryDir/stdout-and-stderr.log")
					outputs.file outFile
					doFirst {
						final def fileStream = new FileOutputStream(outFile)
						standardOutput fileStream
						errorOutput fileStream
					}
				}

				if (!isWindows) {
					// Known to be broken on Windows, but not intentionally so.  Please fix if you
					// know how!  <https://github.com/wala/WALA/issues/608>
					check.dependsOn checkSmoke_main
				}
			}
		}
	}
}
