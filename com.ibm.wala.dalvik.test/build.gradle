plugins {
	id 'com.github.hauner.jarTest'
}

final def downloadDroidBench = tasks.register('downloadDroidBench', VerifiedDownload) {
	src 'https://codeload.github.com/secure-software-engineering/DroidBench/zip/DroidBench_2.0'
	dest "$temporaryDir/DroidBench_2.0.zip"
	checksum '16726a48329835140e14f18470a1b4a3'
}

tasks.register('unpackDroidBench', Sync) {
	dependsOn downloadDroidBench
	from(zipTree(downloadDroidBench.get().dest)) {
		eachFile {
			relativePath new RelativePath(!directory, relativePath.segments[1..-1] as String[])
		}
	}

	into '/tmp/DroidBench'
	includeEmptyDirs false
}

final def downloadAndroidSdk = tasks.register('downloadAndroidSdk', VerifiedDownload) {
	def sdkOs
	switch (osName) {
		case ~/Linux/:
			sdkOs = 'linux'
			checksum '444e22ce8ca0f67353bda4b85175ed3731cae3ffa695ca18119cbacef1c1bea0'
			break
		case ~/Mac OS X/:
			sdkOs = 'darwin'
			checksum '4a81754a760fce88cba74d69c364b05b31c53d57b26f9f82355c61d5fe4b9df9'
			break
		case ~/Windows.*/:
			sdkOs = 'windows'
			checksum '7f6037d3a7d6789b4fdc06ee7af041e071e9860c51f66f7a4eb5913df9871fd2'
			break
		default:
			throw new GradleException("unrecognized operating system name \"$osName\"")
	}
	def archive = "sdk-tools-$sdkOs-3859397.zip"
	src "https://dl.google.com/android/repository/$archive"
	dest "$temporaryDir/$archive"
	algorithm 'SHA-256'
}

final def installAndroidSdk = tasks.register('installAndroidSdk', Sync) {
	dependsOn downloadAndroidSdk
	from zipTree(downloadAndroidSdk.get().dest)
	into temporaryDir

	def buildToolsVersion = '28.0.3'
	ext {
		components = [
			'build-tools': buildToolsVersion,
			'platforms': "android-${buildToolsVersion.tokenize('.')[0]}"
		]
	}

	doLast {
		exec {
			def shell, shellFlags, yes, semicolon, discard
			if (isWindows) {
				shell = 'PowerShell'
				shellFlags = '-Command'
				yes = 'echo y'
				semicolon = '`;'
				discard = '$null'
			} else {
				shell = 'sh'
				shellFlags = '-ceu'
				yes = 'yes 2>/dev/null'
				semicolon = /\;/
				discard = '/dev/null'
			}

			def componentArgs = components.collect { "$it.key$semicolon$it.value" }.join ' '
			commandLine shell, shellFlags, "$yes | $temporaryDir/tools/bin/sdkmanager $componentArgs >$discard"
		}
	}
	outputs.cacheIf { true }
}

final def copyDxJar = tasks.register('copyDxJar', Sync) {
	dependsOn installAndroidSdk
	from "${files(installAndroidSdk).singleFile}/build-tools/${installAndroidSdk.get().components['build-tools']}/lib/dx.jar"
	into 'lib'
}

tasks.named('clean') {
	dependsOn 'cleanCopyDxJar'
}

tasks.named('compileTestJava') {
	dependsOn 'copyDxJar'
}

eclipse {
	synchronizationTasks 'copyDxJar'
}

tasks.register('copyAndroidJar', Sync) {
	dependsOn installAndroidSdk
	from "${installAndroidSdk.get().destinationDir}/platforms/${installAndroidSdk.get().components['platforms']}/android.jar"
	into temporaryDir
}

final def resourceDir = sourceSets.test.resources.srcDirs.find()

tasks.register('downloadSampleCup') {
	inputs.file configurations.sampleCup.singleFile
	outputs.file "$resourceDir/sample.cup"

	doLast {
		copy {
			from zipTree(inputs.files.singleFile)
			include 'parser.cup'
			rename { outputs.files.singleFile.name }
			into outputs.files.singleFile.parent
		}
	}
}

tasks.named('clean') {
	dependsOn 'cleanDownloadSampleCup'
}

tasks.register('downloadSampleLex', VerifiedDownload) {
	src 'https://www.cs.princeton.edu/~appel/modern/java/JLex/current/sample.lex'
	dest "$resourceDir/sample.lex"
	checksum 'ae887758b2657981d023a72a165da830'
}

tasks.named('clean') {
	dependsOn 'cleanDownloadSampleLex'
}

configurations {
	sampleCup
}

dependencies {
	sampleCup 'java_cup:java_cup:0.9e:sources'
	testImplementation(
			'junit:junit:4.12',
			'org.osgi:org.osgi.core:6.0.0',
			'org.smali:dexlib2:2.3.4',
			files("${copyDxJar.get().destinationDir}/dx.jar"),
			project(':com.ibm.wala.core'),
			project(':com.ibm.wala.dalvik'),
			project(':com.ibm.wala.shrike'),
			project(':com.ibm.wala.util'),
			testFixtures(project(':com.ibm.wala.testutil')),
	)
	testRuntimeOnly files("${copyAndroidJar.destinationDir}/android.jar")
}

tasks.named('processTestResources') {
	def testdata = project(':com.ibm.wala.core.testdata')

	from copyAndroidJar
	from downloadSampleCup
	from downloadSampleLex
	from testdata.collectTestDataA
	from testdata.collectJLex
	from testdata.compileTestJava
	from testdata.downloadJavaCup
	from testdata.extractBcel
}

if (isWindows)
	tasks.named('test') {
		exclude '**/droidbench/**'
	}
else
	tasks.named('processTestResources') {
		dependsOn 'unpackDroidBench'
	}

tasks.named('test') {
	maxHeapSize = '800M'
}

tasks.register('cleanTestExtras', Delete) {
	delete(
			'parser.java',
			'report',
			'sym.java',
	)
}

tasks.named('cleanTest') {
	dependsOn 'cleanTestExtras'
}

googleJavaFormat {
	// generated files
	exclude "$name/parser.java"
	exclude "$name/sym.java"
}
