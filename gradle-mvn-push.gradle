apply plugin: 'maven-publish'
apply plugin: 'signing'

final def isSnapshot = version.contains('SNAPSHOT')

publishing {
	publications {
		wala(MavenPublication) {
			from components.java
			suppressPomMetadataWarningsFor 'testFixturesApiElements'
			suppressPomMetadataWarningsFor 'testFixturesRuntimeElements'

			// Special handling for test fixtures.
			if (sourceSets.testFixtures.allSource.isEmpty()) {
				// Test-fixtures jar would be empty except for the manifest, so skip it.
				[
						configurations.testFixturesApiElements,
						configurations.testFixturesRuntimeElements,
				].each {
					components.java.withVariantsFromConfiguration(it) {
						skip()
					}
				}
			} else {
				// Test-fixtures jar will have real contents, so add Javadoc and sources
				tasks.named('testFixturesJavadoc') {
					destinationDir = file("$docsDir/testFixturesJavadoc")
				}

				tasks.register('testFixturesJavadocJar', Jar) {
					classifier = 'test-fixtures-javadoc'
					from testFixturesJavadoc.destinationDir
					dependsOn testFixturesJavadoc
				}

				tasks.register('testFixturesSourcesJar', Jar) {
					classifier = 'test-fixtures-sources'
					from sourceSets.testFixtures.allSource
				}

				publishing {
					publications {
						wala(MavenPublication) {
							artifact testFixturesJavadocJar
							artifact testFixturesSourcesJar
						}
					}
				}
			}

			pom {
				name = POM_NAME
				description = 'T. J. Watson Libraries for Analysis'
				inceptionYear = '2006'
				url = 'https://github.com/wala/WALA'

				ciManagement {
					system = 'Travis CI'
					url = 'https://travis-ci.org/wala/WALA'
				}

				developers {
					[
							// Current WALA maintainers, alphabetical by ID
							juliandolby: 'Julian Dolby',
							liblit     : 'Ben Liblit',
							msridhar   : 'Manu Sridharan',
							sjfink     : 'Stephen Fink',
					].each { entry ->
						developer {
							id = entry.key
							name = entry.value
							url = "https://github.com/$entry.key"
						}
					}
				}

				issueManagement {
					system = 'GitHub'
					url = "${pom.url.get()}/issues"
				}

				licenses {
					license {
						name = 'Eclipse Public License v2.0'
						url = "${pom.url.get()}/blob/master/LICENSE"
					}
				}

				mailingLists {
					[
							'commits',
							'wala',
					].each { topic ->
						mailingList {
							name = "wala-$topic"
							archive = "https://sourceforge.net/p/wala/mailman/wala-$topic"
							subscribe = "https://sourceforge.net/projects/wala/lists/wala-$topic"
							unsubscribe = "https://sourceforge.net/projects/wala/lists/wala-$topic/unsubscribe"
							post = "wala-$topic@lists.sourceforge.net"
						}
					}
				}

				scm {
					url = pom.url
					connection = 'scm:git:git://github.com/wala/WALA.git'
					developerConnection = 'scm:git:ssh://git@github.com/wala/WALA.git'
				}
			}
		}
	}

	repositories {
		maven {
			url = (isSnapshot
					? properties.getOrDefault('SNAPSHOT_REPOSITORY_URL', 'https://oss.sonatype.org/content/repositories/snapshots/')
					: properties.getOrDefault('RELEASE_REPOSITORY_URL', 'https://oss.sonatype.org/service/local/staging/deploy/maven2/')
			)
			credentials {
				username = properties.get('SONATYPE_NEXUS_USERNAME')
				password = properties.get('SONATYPE_NEXUS_PASSWORD')
			}
		}

		maven {
			name = 'projectBuild'
			url = "file://$rootProject.buildDir/maven-repository"
		}
	}
}

signing {
	// Use external gpg cmd.  This makes it easy to use gpg-agent,
	// to avoid being prompted for a password once per artifact
	useGpgCmd()
	sign publishing.publications.wala
	required = true
}

// Only sign the archives if we are uploading a snapshot or release.
tasks.withType(Sign) {
	onlyIf {
		!isSnapshot &&
				[
						'publishWalaPublicationToProjectBuildRepository',
						'publishWalaPublicationToSnapshotRepository',
				].any { gradle.taskGraph.hasTask("$project.path:$it") }
	}
}

java {
	withJavadocJar()
	withSourcesJar()
}
