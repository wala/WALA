apply plugin: 'maven-publish'
apply plugin: 'signing'

final isSnapshot = version.contains('SNAPSHOT')

final skipTestFixtures() {
	components.java.withVariantsFromConfiguration(configurations.testFixturesApiElements) {
		skip()
	}
	components.java.withVariantsFromConfiguration(configurations.testFixturesRuntimeElements) {
		skip()
	}
}

final sharedPublicationConfiguration(publication) {
	publication.from components.java
	publication.pom {
		name = POM_NAME
		description = 'T. J. Watson Libraries for Analysis'
		inceptionYear = '2006'
		url = 'https://github.com/wala/WALA'

		ciManagement {
			system = 'Travis CI'
			url = 'https://travis-ci.org/wala/WALA'
		}

		developers {
			[
					// Current WALA maintainers, alphabetical by ID
					juliandolby: 'Julian Dolby',
					liblit     : 'Ben Liblit',
					msridhar   : 'Manu Sridharan',
					sjfink     : 'Stephen Fink',
			].each { entry ->
				developer {
					id = entry.key
					name = entry.value
					url = "https://github.com/$entry.key"
				}
			}
		}

		issueManagement {
			system = 'GitHub'
			url = "${publication.pom.url.get()}/issues"
		}

		licenses {
			license {
				name = 'Eclipse Public License v2.0'
				url = "${publication.pom.url.get()}/blob/master/LICENSE"
			}
		}

		mailingLists {
			[
					'commits',
					'wala',
			].each { topic ->
				mailingList {
					name = "wala-$topic"
					archive = "https://sourceforge.net/p/wala/mailman/wala-$topic"
					subscribe = "https://sourceforge.net/projects/wala/lists/wala-$topic"
					unsubscribe = "https://sourceforge.net/projects/wala/lists/wala-$topic/unsubscribe"
					post = "wala-$topic@lists.sourceforge.net"
				}
			}
		}

		scm {
			url = publication.pom.url
			connection = 'scm:git:git://github.com/wala/WALA.git'
			developerConnection = 'scm:git:ssh://git@github.com/wala/WALA.git'
		}
	}
}

publishing {
	publications {

		// Everything we want to publish to remote repositories.  That includes code, sources, and
		// Javadoc for main sourceSet, but not tests or test fixtures.
		remote(MavenPublication) {
			sharedPublicationConfiguration it
			skipTestFixtures()
		}

		// Everything we want to publish to local installations.  That includes code, sources, and
		// Javadoc for the both main and test-fixtures sourceSets, but not tests.
		local(MavenPublication) {
			sharedPublicationConfiguration it

			if (sourceSets.testFixtures.allSource.isEmpty()) {
				// Test-fixtures jar would be empty except for the manifest, so skip it.
				skipTestFixtures()
			} else {
				// Test-fixtures jar will have real contents, so add Javadoc and sources
				tasks.named('testFixturesJavadoc') {
					destinationDir = file("$docsDir/testFixturesJavadoc")
				}

				tasks.register('testFixturesJavadocJar', Jar) {
					classifier = 'test-fixtures-javadoc'
					from testFixturesJavadoc.destinationDir
					dependsOn testFixturesJavadoc
				}

				tasks.register('testFixturesSourcesJar', Jar) {
					classifier = 'test-fixtures-sources'
					from sourceSets.testFixtures.allSource
				}

				artifact testFixturesJar
				artifact testFixturesJavadocJar
				artifact testFixturesSourcesJar
			}
		}
	}

	repositories {
		maven {
			url = (isSnapshot
					? project.properties.getOrDefault('SNAPSHOT_REPOSITORY_URL', 'https://oss.sonatype.org/content/repositories/snapshots/')
					: project.properties.getOrDefault('RELEASE_REPOSITORY_URL', 'https://oss.sonatype.org/service/local/staging/deploy/maven2/')
			)
			credentials {
				username = project.properties.get('SONATYPE_NEXUS_USERNAME')
				password = project.properties.get('SONATYPE_NEXUS_PASSWORD')
			}
		}

		maven {
			name = 'fakeRemote'
			url = "file://$rootProject.buildDir/maven-fake-remote-repository"
		}
	}
}

signing {
	// Use external gpg cmd.  This makes it easy to use gpg-agent,
	// to avoid being prompted for a password once per artifact.
	useGpgCmd()

	// If anything about signing is misconfigured, fail loudly rather than quietly continuing with
	// unsigned artifacts.
	required = true

	// Only sign publications sent to remote repositories; local install installatios are unsigned.
	sign publishing.publications.remote
}

// Only sign releases; snapshots are unsigned.
tasks.withType(Sign) {
	onlyIf {
		!isSnapshot
	}
}

java {
	withJavadocJar()
	withSourcesJar()
}

// Remote publication set goes to remote repositories, so we don't publicly publish test fixtures.
tasks.withType(PublishToMavenRepository) {
	onlyIf {
		publication == publishing.publications.remote
	}
}

// Local publication set goes to local installations, so we can reuse test fixtures locally.
tasks.withType(PublishToMavenLocal) {
	onlyIf {
		publication == publishing.publications.local
	}
}
